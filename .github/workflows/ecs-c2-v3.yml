name: ECS-C2 CI/CD demo - deploy

on:
  push:
    tags:
      - 'v*'


jobs:
  ecs-c2-v2-access-log:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Registry login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          
      - name: Docker - image metadata
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: sixeyed/access-log

      - name: Docker - setup buildx
        uses: docker/setup-buildx-action@v1
        
      - name: Docker - setup layer cache
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push Access Log
        uses: docker/build-push-action@v2
        with:
          context: ./episodes/ecs-c2/src/access-log
          file: ./episodes/ecs-c2/src/access-log/Dockerfile.v2
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

  ecs-c2-v2-image-gallery:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@master

      - name: Registry login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          
      - name: Docker - image metadata
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: sixeyed/image-gallery

      - name: Docker - setup buildx
        uses: docker/setup-buildx-action@v1
        
      - name: Docker - setup layer cache
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push Image Gallery
        uses: docker/build-push-action@v2
        with:
          context: ./episodes/ecs-c2/src/image-gallery
          file: ./episodes/ecs-c2/src/image-gallery/Dockerfile.v2
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

  ecs-c2-v2-image-of-the-day:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@master

      - name: Registry login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          
      - name: Docker - image metadata
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: sixeyed/image-of-the-day

      - name: Docker - setup buildx
        uses: docker/setup-buildx-action@v1
        
      - name: Docker - setup layer cache
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push Image of the Day
        uses: docker/build-push-action@v2
        with:
          context: ./episodes/ecs-c2/src/image-of-the-day
          file: ./episodes/ecs-c2/src/image-of-the-day/Dockerfile.v2
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

  ecs-c2-deploy:  
    needs: [ecs-c2-v2-access-log, ecs-c2-v2-image-gallery, ecs-c2-v2-image-of-the-day]
    runs-on: ubuntu-latest
    steps:

    - name: Set image tag
      id: vars
      run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

    - uses: Azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ecs-c2
        resource-group: ecs-c2

    - uses: Azure/k8s-deploy@v1.3
      with:
        manifests: |
          kubernetes/api.yml
          kubernetes/log.yml
          kubernetes/web.yml
        images: |
          sixeyed/image-of-the-day:${{ steps.vars.outputs.tag }}
          sixeyed/access-log:${{ steps.vars.outputs.tag }}
          sixeyed/image-gallery:${{ steps.vars.outputs.tag }}